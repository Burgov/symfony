<script>/*<![CDATA[*/
    Sfjs = (function() {
        "use strict";

        var noop = function() {},

            profilerStorageKey = 'sf2/profiler/',

            request = function(url, onSuccess, onError, payload, options) {
                var xhr = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject('Microsoft.XMLHTTP');
                options = options || {};
                options.maxTries = options.maxTries || 0;
                xhr.open(options.method || 'GET', url, true);
                xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
                xhr.onreadystatechange = function(state) {
                    if (4 !== xhr.readyState) {
                        return null;
                    }

                    if (xhr.status == 404 && options.maxTries > 1) {
                        setTimeout(function(){
                            options.maxTries--;
                            request(url, onSuccess, onError, payload, options);
                        }, 500);

                        return null;
                    }

                    if (200 === xhr.status) {
                        (onSuccess || noop)(xhr);
                    } else {
                        (onError || noop)(xhr);
                    }
                };
                xhr.send(payload || '');
            },

            hasClass = function(el, klass) {
                return el.className && el.className.match(new RegExp('\\b' + klass + '\\b'));
            },

            removeClass = function(el, klass) {
                if (el.className) {
                    el.className = el.className.replace(new RegExp('\\b' + klass + '\\b'), ' ');
                }
            },

            addClass = function(el, klass) {
                if (!hasClass(el, klass)) {
                    el.className += " " + klass;
                }
            },

            getPreference = function(name) {
                if (!window.localStorage) {
                    return null;
                }

                return localStorage.getItem(profilerStorageKey + name);
            },

            setPreference = function(name, value) {
                if (!window.localStorage) {
                    return null;
                }

                localStorage.setItem(profilerStorageKey + name, value);
            },

            requestStack = [],

            renderAjaxRequests = function() {
                var requestCounter = document.getElementsByClassName('sf-toolbar-ajax-requests');
                if (!requestCounter.length) {
                    return;
                }

                var list = document.getElementsByClassName('sf-toolbar-ajax-request-list');
                var state = 'ok';
                if (list.length) {

                    if (requestStack.length) {
                        var ul = document.createElement('ul');
                        for(var i in requestStack) {
                            var request = requestStack[i];

                            var fragment = document.createDocumentFragment();
                            var li = document.createElement('li');
                            fragment.appendChild(li);

                            var pathSpan = document.createElement('span');
                            pathSpan.className = 'sf-ajax-request-url';
                            pathSpan.innerHTML = request.method + " " + request.url;
                            li.appendChild(pathSpan);

                            if (request.duration) {
                                li.appendChild(document.createTextNode(' '));
                                var durationSpan = document.createElement('time');
                                durationSpan.innerText = request.duration + "ms";
                                li.appendChild(durationSpan);
                            }

                            if (request.profilerUrl) {
                                li.appendChild(document.createTextNode(' '));
                                var profilerA = document.createElement('a');
                                profilerA.setAttribute('href', request.profilerUrl);
                                profilerA.innerText = 'profiler';
                                li.appendChild(profilerA);
                            }
                            var requestState = 'ok';
                            if (request.error) {
                                requestState = 'error';
                                if (state != "loading" && i > requestStack.length - 4) {
                                    state = 'error';
                                }
                            } else if (request.loading) {
                                requestState = 'loading';
                                state = 'loading'
                            }
                            li.className = 'sf-ajax-request-' + requestState;
                            ul.appendChild(fragment.cloneNode(true));
                        }

                        list[0].innerHTML = '';
                        list[0].appendChild(ul);
                    } else {
                        list[0].innerText = "No AJAX requests fired yet.";
                    }
                }

                requestCounter[0].innerText = requestStack.length;
                requestCounter[0].className = 'sf-toolbar-ajax-requests sf-ajax-request-' + state;
            };

        var proxied = XMLHttpRequest.prototype.open;

        XMLHttpRequest.prototype.open = function(method, url, async, user, pass) {
            var self = this;

            /* prevent logging AJAX calls to static and inline files, like templates */
            if (url.substr(0, 1) === '/' && !url.substr(0, 8) !== '/bundles') {
                var stackElement = {
                    loading: true,
                    error: false,
                    url: url,
                    method: method,
                    start: new Date()
                };

                requestStack.push(stackElement);

                this.addEventListener("readystatechange", function() {
                    if (self.readyState == 4) {
                        stackElement.duration = new Date() - stackElement.start;
                        stackElement.loading = false;
                        stackElement.error = self.status < 200 || self.status >= 400;
                        stackElement.profilerUrl = self.getResponseHeader("X-Debug-Token-Link");

                        Sfjs.renderAjaxRequests();
                    }
                }, false);

                Sfjs.renderAjaxRequests();
            }

            proxied.apply(this, [].slice.call(arguments));
        };

        return {
            hasClass: hasClass,

            removeClass: removeClass,

            addClass: addClass,

            getPreference: getPreference,

            setPreference: setPreference,

            request: request,

            renderAjaxRequests: renderAjaxRequests,

            load: function(selector, url, onSuccess, onError, options) {
                var el = document.getElementById(selector);

                if (el && el.getAttribute('data-sfurl') !== url) {
                    request(
                        url,
                        function(xhr) {
                            el.innerHTML = xhr.responseText;
                            el.setAttribute('data-sfurl', url);
                            removeClass(el, 'loading');
                            (onSuccess || noop)(xhr, el);
                        },
                        function(xhr) { (onError || noop)(xhr, el); },
                        '',
                        options
                    );
                }

                return this;
            },

            toggle: function(selector, elOn, elOff) {
                var i,
                    style,
                    tmp = elOn.style.display,
                    el = document.getElementById(selector);

                elOn.style.display = elOff.style.display;
                elOff.style.display = tmp;

                if (el) {
                    el.style.display = 'none' === tmp ? 'none' : 'block';
                }

                return this;
            }
        }
    })();
/*]]>*/</script>
